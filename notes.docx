JWT Token

Step 1... after creating app include this repo in the project main directory or root directory

(https://jwt-auth.readthedocs.io/en/develop/laravel-installation/)
composer require php-open-source-saver/jwt-auth

Step 2... after runing the above command then generate a secret key

php artisan vendor:publish --provider="PHPOpenSourceSaver\JWTAuth\Providers\LaravelServiceProvider"

php artisan jwt:secret

Step 3.... after this change user model 

use Tymon\JWTAuth\Contracts\JWTSubject;

Step 4...include the above line of code and implements itin class

need to add 2 methods as well
 public function getJWTIdentifier()
    {
        return $this->getKey();
    }

    /**
     * Return a key value array, containing any custom claims to be added to the JWT.
     *
     * @return array
     */
    public function getJWTCustomClaims()
    {
        return [];
    }

Step 5.... after this add guard in config->auth.php

 'api' => [
            'driver' => 'jwt',
            'provider' => 'users',
        ],

Step 6.... add routes in routes->api.php and create AuthController 
 update the code of AuthController
 <?php

namespace App\Http\Controllers;

use Illuminate\Support\Facades\Auth;
use App\Http\Controllers\Controller;
use App\Http\Controllers\Request;
use App\Models\User;
use Illuminate\Support\Facades\Hash;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request as HttpRequest;
use Illuminate\Support\Facades\Validator;
class AuthController extends Controller
{
    /**
     * Create a new AuthController instance.
     *
     * @return void
     */
    // public function __construct()
    // {
    //     $this->middleware('auth:api', ['except' => ['login']]);
    // }

    public function register (Request $request){
        $validateData = $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:users',
            'password' => 'required|string|min:8|confirmed',
        ]);

        $user = User::create([
            'name' => $validateData['name'],
            'email' => $validateData['email'],
            'password' => bcrypt($validateData['password']),
        ]);

        $token = auth()->login($user);
        return $this->respondWithToken($token);
    }

    /**
     * Get a JWT via given credentials.
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function login()
    {
        $credentials = request(['email', 'password']);

        if (! $token = auth()->attempt($credentials)) {
            return response()->json(['error' => 'Unauthorized'], 401);
        }

        return $this->respondWithToken($token);
    }

    /**
     * Get the authenticated User.
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function me()
    {
        return response()->json(auth()->user());
    }

    /**
     * Log the user out (Invalidate the token).
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function logout()
    {
        auth()->logout();

        return response()->json(['message' => 'Successfully logged out']);
    }

    /**
     * Refresh a token.
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function refresh()
    {
        return $this->respondWithToken(auth()->refresh());
    }

    /**
     * Get the token array structure.
     *
     * @param  string $token
     *
     * @return \Illuminate\Http\JsonResponse
     */
    protected function respondWithToken($token)
    {
        return response()->json([
            'access_token' => $token,
            'token_type' => 'bearer',
            'expires_in' => auth()->factory()->getTTL() * 60
        ]);
    }
}



Step 7.... create a request file 

php artisan make:request UserRegisterRequest 

Step 8.... convert false into true and add rules in the rules function
and add this request file in the AuthController and in register function just call validated(); method

....................................................working Perfectly...............................................

Roles and Permissions

step 1... create admincontroller 

step 2... composer require spatie/laravel-permission 
run this command

step 3... change the bootstrap->providers.php and add
    Spatie\Permission\PermissionServiceProvider::class

step 4... run the command 
php artisan vendor:publish --provider="Spatie\Permission\PermissionServiceProvider"

step 5... change the App->Models->user.php and add HasRoles in the top where notifiable mentioned

step 6... now in login middleware add the condition

public function login(Request $request)
    {
        if(Auth::attempt($request->only('email', 'password')))
        {
        // fetch the User
        $user = Auth::user();

        if($user-> hasRole('admin')){
        return redirect()->route('admin.dashboard);
        }
        Auth::logout();
        //can show erroe message
        }
    }


......................................Middleware.............................................

step 1... php artisan make:middleware AdminAuthMiddleware

step 2... App->http->Middleware->AdminAuthMiddleware
in handle function check user is loggesd in or not

public function handle(Request $request, Closure $next): Response
    {
        if(Auth::check()){
            return $next($request);
        }
        return redirect()->route('admin.login);
    }


 for specific role we can strict the middlware as well

 public function handle(Request $request, Closure $next, ...$roles): Response
    {
        if(Auth::check() && Auth::user()->hasAnyRole($roles)){
            return $next($request);
        }
        return redirect()->route('admin.login);
    }

    this role will pass through routes

step 3... register the middleware

 in bootstrap->app.php, 1st import middleware then

return Application::configure(basePath: dirname(__DIR__))
    ->withRouting(
        web: __DIR__.'/../routes/web.php',
        api: __DIR__.'/../routes/api.php',
        commands: __DIR__.'/../routes/console.php',
        health: '/up',
    )
    ->withMiddleware(function (Middleware $middleware) {
        //change here
        $middleware->alias([
            'admin_auth'=> AdminAuthMiddleware::class,
        ]);
    })
    ->withExceptions(function (Exceptions $exceptions) {
        //
    })->create();

step 4... change the routes

Route::middleware(['admin_auth])->group(function(){
    Route::get('/admin/dashboard', [DashboardController::class, 'index'])->name('index');
    and so on....
})

here we can specify the role 
Route::middleware(['admin_auth:admin'])->group(function(){
    Route::get('/admin/dashboard', [DashboardController::class, 'index'])->name('index');
    and so on....
})

Note:   agr login user ko wapas login page pa jany sa rokna ho tou aik or middleware bny ga but is ma krna ya ha k agr user login ha tou usy dash board pa redirect kerny ki middleware ki condition lagani ha
 register krna ha us middleware ko....
 phir login waly routes ko us middleware k under rakh dena ha ...
......................................Middleware Complete..........................................

